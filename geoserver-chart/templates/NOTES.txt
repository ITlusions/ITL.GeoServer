1. Get the application URL by running these commands:
{{- if .Values.ingress.enabled }}
{{- range $host := .Values.ingress.hosts }}
  {{- range .paths }}
  http{{ if $.Values.ingress.tls }}s{{ end }}://{{ $host.host }}{{ .path }}
  {{- end }}
{{- end }}
{{- else if contains "NodePort" .Values.service.type }}
  export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath="{.spec.ports[0].nodePort}" services {{ include "geoserver.fullname" . }})
  export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath="{.items[0].status.addresses[0].address}")
  echo http://$NODE_IP:$NODE_PORT
{{- else if contains "LoadBalancer" .Values.service.type }}
     NOTE: It may take a few minutes for the LoadBalancer IP to be available.
           You can watch the status of by running 'kubectl get --namespace {{ .Release.Namespace }} svc -w {{ include "geoserver.fullname" . }}'
  export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ include "geoserver.fullname" . }} --template "{{"{{ range (index .status.loadBalancer.ingress 0) }}{{.}}{{ end }}"}}")
  echo http://$SERVICE_IP:{{ .Values.service.port }}
{{- else if contains "ClusterIP" .Values.service.type }}
  export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l "{{ include "geoserver.selectorLabels" . }}" -o jsonpath="{.items[0].metadata.name}")
  export CONTAINER_PORT=$(kubectl get pod --namespace {{ .Release.Namespace }} $POD_NAME -o jsonpath="{.spec.containers[0].ports[0].containerPort}")
  echo "Visit http://127.0.0.1:8080 to use your application"
  kubectl --namespace {{ .Release.Namespace }} port-forward $POD_NAME 8080:$CONTAINER_PORT
{{- end }}

2. Default GeoServer credentials:
   Username: {{ .Values.geoserver.admin.username | default "admin" }}
   Password: {{ .Values.geoserver.admin.password | default "geoserver" }}

   IMPORTANT: Change the default credentials immediately after installation!

3. GeoServer Web Interface:
   Access the GeoServer web interface at: /geoserver/web
   REST API is available at: /geoserver/rest

{{- if .Values.https.enabled }}
4. HTTPS Configuration:
   HTTPS is enabled with keystore: {{ .Values.https.keystoreFile }}
   Make sure your keystore secret contains a valid SSL certificate.
{{- end }}

{{- if .Values.geoserver.persistence.enabled }}
5. Data Persistence:
   GeoServer data is persisted using PVC: {{ .Values.geoserver.persistence.existingClaim | default (printf "%s-data" (include "geoserver.fullname" .)) }}
   Size: {{ .Values.geoserver.persistence.size }}
{{- end }}

{{- if .Values.geoserver.extensions.enabled }}
6. Extensions:
   The following extensions will be installed on startup:
   {{- if .Values.geoserver.extensions.stable }}
   Stable: {{ join ", " .Values.geoserver.extensions.stable }}
   {{- end }}
   {{- if .Values.geoserver.extensions.community }}
   Community: {{ join ", " .Values.geoserver.extensions.community }}
   {{- end }}
{{- end }}

{{- if .Values.postgresql.jndi.enabled }}
7. PostgreSQL JNDI:
   PostgreSQL JNDI resource is configured: {{ .Values.postgresql.jndi.resourceName }}
   Connection: {{ .Values.postgresql.jndi.host }}:{{ .Values.postgresql.jndi.port }}/{{ .Values.postgresql.jndi.database }}
{{- end }}
